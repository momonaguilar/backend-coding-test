openapi: 3.0.0
info:
  title: Backend Coding Test - Riders API
  description: For Xendit backend coding test only.

    ANGKAS API is an imaginary api service that lets user hop-on and off from someone's bike, more of a Grab Car concept on a motorbike world.

    This API service serves a middleware component to that front-end applications call to perform operations such as add, retrieve rides from the database.
  version: 0.1.9
servers:
  - url: http://localhost:8010/
    description: Development server
tags:
  - name: Rides
paths:
  /health:
    get:
      summary: Check API health
      description: Check API health
      tags: ["Rides"]
      responses:
        '200':    # status code
          description: Success
  /rides: 
    post: 
      summary: Add a new ride
      consumes:
        - application/json
      produces:
        - application/json
      tags: ["Rides"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_lat:
                  type: integer
                  default: 90
                end_lat:
                  type: integer
                  default: 90
                start_long:
                  type: integer
                  default: 90
                end_long:
                  type: integer
                  default: 90
                rider_name:
                  type: string
                  default: 'Mr Rider'
                driver_name:
                  type: string
                  default: 'Mr Driver'
                driver_vehicle:
                  type: string
                  default: 'Vehicle default'
      parameters: 
      - name: start_lat
        description: Start latitude, accepts -90 to 90
        in: formData 
        required: true 
        type: integer
        default: 90
      - name: end_lat
        description: End latitude, accepts -180 to 180
        in: formData 
        required: true 
        type: integer
        default: 90
      - name: start_long
        description: Start longitude, accepts -90 to 90
        in: formData 
        required: true 
        type: integer
        default: 90
      - name: end_long
        description: Start longitude, accepts -180 to 180
        in: formData 
        required: true 
        type: integer
        default: 90
      - name: rider_name
        description: Name of rider
        in: formData 
        required: true 
        type: String
        default: 'Mr Rider'
      - name: driver_name
        description: Name of driver
        in: formData 
        required: true 
        type: String
        default: 'Mr Driver'
      - name: driver_vehicle
        description: Driver vehicle
        in: formData 
        required: true 
        type: String
        default: 'Vehicle default'
      responses:  
        200: 
          description: Created  
        500: 
          description: Server Error  
    get:
      summary: Get all rides
      description: |
        Retrieve all rides.
        
        Notes to dev: For paginated result, please take note of below:

        *totalItem - total records<br>
        *currentPage = current page to show; default to 1<br>
        *recordsPerPage = number of records to show per page, default to 5<br>
        *maxPages = maximum number of paginated page to hold results; default to 5 <br>

        The pagination will return an object with below structure:
        <code><br>
        {<br>
         totalItems: [X total records fetched],<br>
         currentPage: [X current page],<br>
         recordsPerPage: [X records per page],<br>
         totalPages: [calculated X total pages],<br>
         pageToShow: [calculated X pages to show],<br>
         startPage: [calculated X start page],<br>
         endPage: [calculated X end page],<br>
         firstRecordIndexOfCurrentPage: [start index, the start record to show from this page]<br>
         lastRecordIndexOfCurrentPage: [end index, the last record to show in this page]<br>
         pages: [calculated array of pages to show]<br>
        }<br>
        </code>
      tags: ["Rides"]
      parameters:
        - name: pagination
          in: query
          description: Optional; returns paginated results
          required: false
          type: boolean
          default: false
      responses:  
        200: 
          description: Success
        404: 
          description: Not found
  /rides/{rideID}: 
    get:
      description: Get all rides
      tags: ["Rides"]
      parameters: 
      - in: path
        name: rideID
        description: Ride ID to search
        required: true 
        schema:
          type: integer
      responses:  
        200: 
          description: Success
        404: 
          description: Not found  